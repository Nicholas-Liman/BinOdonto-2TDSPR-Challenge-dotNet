// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Transforms;

namespace BinOdonto
{
    public partial class MLModel
    {
        public const string RetrainFilePath = @"D:\Downloads\dataset_proximidade_cep_sao_paulo_final.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader = true;
        public const bool RetrainAllowQuoting = false;

        /// <summary>
        /// Train a new model and save it as a .zip file.
        /// </summary>
        /// <param name="outputModelPath">File path to save the model (e.g., D:\Downloads\MLModel.zip)</param>
        /// <param name="inputDataFilePath">Path to training data CSV</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader, bool allowQuoting = RetrainAllowQuoting)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader, allowQuoting);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader, bool allowQuoting)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(
                inputDataFilePath,
                separatorChar: separatorChar,
                hasHeader: hasHeader,
                allowQuoting: allowQuoting
            );
        }

        /// <summary>
        /// Saves the trained model to a .zip file for consumption in production apps.
        /// </summary>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            var schema = data.Schema;
            using var fs = File.Create(modelSavePath);
            mlContext.Model.Save(model, schema, fs);
        }

        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            return pipeline.Fit(trainData);
        }

        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            return mlContext.Transforms.Categorical.OneHotEncoding(
                            outputColumnName: "mesmo_prefixo",
                            inputColumnName: "mesmo_prefixo",
                            outputKind: OneHotEncodingEstimator.OutputKind.Indicator)

                .Append(mlContext.Transforms.ReplaceMissingValues(
                    new[]
                    {
                        new InputOutputColumnPair("cep_cliente_num"),
                        new InputOutputColumnPair("cep_funcionario_num"),
                        new InputOutputColumnPair("diferenca_ceps")
                    }))

                .Append(mlContext.Transforms.Concatenate("Features",
                    new[] { "mesmo_prefixo", "cep_cliente_num", "cep_funcionario_num", "diferenca_ceps" }))

                .Append(mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options
                {
                    LabelColumnName = "proximo",
                    FeatureColumnName = "Features",
                    NumberOfLeaves = 4,
                    MinimumExampleCountPerLeaf = 20,
                    NumberOfTrees = 4,
                    LearningRate = 0.1
                }));
        }
    }
}
